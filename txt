const mongoose = require('mongoose');
const productSchema = new mongoose.Schema({
    _id: mongoose.Schema.Types.ObjectId,
    code: String,
    title: String,
    descrption: Number,
    mrp: String,
    sp: String,
    discount: String,
    imagepath: String
})

const product = mongoose.model('Poduct', productSchema);
module.exports = product;

//eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkFsb2siLCJ1c2VydHlwZSI6ImVtcGxveWUiLCJlbWFpbCI6InZpbmVldC5zZW5AaW5kaWNjaGFpbi5jb20iLCJwaG9uZSI6ODgyNzM1Mzg2MywiaWF0IjoxNzA3MTE3ODkwLCJleHAiOjE3MDcyMDQyOTB9.jHM1HMQF5EFacWUy7Z6oHGRCrB8DTFqAQxd0bJ5lX3M


router.post('/login', (req, res, next) => {
    User.find({ username: req.body.username }).exec()
        .then(user => {
            if (user.length < 1) {
                return res.status(401).json({ msg: "User not found" });
            }

            bcrypt.compare(req.body.password, user[0].password, (err, result) => {
                if (err) {
                    console.log(err);
                    return res.status(500).json({ error: err });
                }

                if (!result) {
                    return res.status(401).json({ msg: "Password matching failed" });
                }

                const token = jwt.sign({
                    username: user[0].username,
                    usertype: user[0].usertype,
                    email: user[0].email,
                    phone: user[0].phone
                }, 'this is dummy text', { expiresIn: '24h' });

                res.status(200).json({
                    username: user[0].username,
                    usertype: user[0].usertype,
                    email: user[0].email,
                    phone: user[0].phone,
                    token: token
                });
            });
        })
        .catch(err => {
            console.log(err);
            res.status(500).json({ error: err });
        });
});